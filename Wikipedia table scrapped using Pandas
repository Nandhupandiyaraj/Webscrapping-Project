{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyP0Cw9ZxRD5aCHDlAoD+9LD",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Nandhupandiyaraj/Webscrapping-Project/blob/main/Wikipedia%20table%20scrapped%20using%20Pandas\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VQ4W-3zQrJo9",
        "outputId": "988bdd25-983a-4344-986c-772eb8b4f3bf"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "True\n"
          ]
        }
      ],
      "source": [
        "starting_Time_1 = '2025-02-21 08:00:00.746502'\n",
        "\n",
        "ending_Time_1 = '2025-02-21 12:00:00.746502'\n",
        "\n",
        "starting_Time_2 = '2025-02-21 12:00:00.746502'\n",
        "\n",
        "ending_Time_2 = '2025-02-21 01:30:00.746502'\n",
        "\n",
        "if starting_Time_2 > ending_Time_1:\n",
        "    print(True)\n",
        "else:\n",
        "    print(False)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "arr1 = np.array([[1,2,3],[4,5,6]])\n",
        "\n",
        "arr2 = arr1.transpose()\n",
        "\n",
        "arr3 = sum(arr1)\n",
        "\n",
        "arr4 = arr1[0] * arr1[1]\n",
        "\n",
        "arr5 =  np.rot90(arr1, k=-1)\n",
        "\n",
        "arr6 = np.rot90(arr1, k=2)\n",
        "\n",
        "print(arr1)\n",
        "print(arr2)\n",
        "print(arr3)\n",
        "print(arr4)\n",
        "print(arr5)\n",
        "print(arr6)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BduVY6bEtHRt",
        "outputId": "c025a2eb-6d85-4cf3-8182-f8b5c513e775"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[1 2 3]\n",
            " [4 5 6]]\n",
            "[[1 4]\n",
            " [2 5]\n",
            " [3 6]]\n",
            "[5 7 9]\n",
            "[ 4 10 18]\n",
            "[[4 1]\n",
            " [5 2]\n",
            " [6 3]]\n",
            "[[6 5 4]\n",
            " [3 2 1]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import requests\n",
        "from bs4 import BeautifulSoup\n",
        "import json\n",
        "import pandas as pd\n",
        "import os\n",
        "\n",
        "url = \"https://en.wikipedia.org/wiki/ASEAN\"\n",
        "response = requests.get(url)\n",
        "\n",
        "soup = BeautifulSoup(response.text, \"html.parser\")\n",
        "\n",
        "table = soup.find(\"table\",class_=\"sortable wikitable plainrowheaders\")\n",
        "\n",
        "cities = []\n",
        "for row in table.find_all(\"tr\"):\n",
        "    ths = row.find_all(\"th\")\n",
        "    if len(ths) > 1:\n",
        "        city_name = ths[1].find(\"a\").text.strip()\n",
        "        cities.append(city_name)\n",
        "\n",
        "countries = []\n",
        "for row in table.find_all(\"tr\"):\n",
        "    td = row.find_all(\"td\")\n",
        "    if len(td) > 2:\n",
        "      country_name = td[2].find(\"a\").text.strip()\n",
        "      countries.append(country_name)\n",
        "\n",
        "country_population = []\n",
        "for row in table.find_all(\"tr\"):\n",
        "    tds = row.find_all(\"td\")\n",
        "    if len(tds) > 0:\n",
        "        population = tds[0].text.strip()\n",
        "        country_population.append(population)\n",
        "\n",
        "City_Area = []\n",
        "for row in table.find_all(\"tr\"):\n",
        "    tds = row.find_all(\"td\")\n",
        "    if len(tds) > 1:\n",
        "        Area = tds[1].text.strip()\n",
        "        City_Area.append(Area)\n",
        "\n",
        "\n",
        "countries_dictionary = {\n",
        "    \"Core city\": [city for city in cities if city != \"Core city\"],\n",
        "    \"Country\": countries,\n",
        "    \"Population\": country_population,\n",
        "    \"Area\": City_Area,\n",
        "    \"Population_Density\": [float(population.replace(\",\", \"\")) / float(area.replace(\",\", \"\"))\n",
        "                        for population, area in zip(country_population, City_Area)]\n",
        "}\n",
        "\n",
        "output_file = \"asean_urban_areas.json\"\n",
        "with open(output_file, \"w\", encoding=\"utf-8\") as f:\n",
        "    json.dump(countries_dictionary, f, indent=4, ensure_ascii=False)\n",
        "\n",
        "print(json.dumps(countries_dictionary, indent=4, ensure_ascii=False))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Q6jCzonOcmo-",
        "outputId": "85a054fa-818b-43db-cd32-6f8850ad6c9a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{\n",
            "    \"Core city\": [\n",
            "        \"Jakarta\",\n",
            "        \"Manila\",\n",
            "        \"Ho Chi Minh City\",\n",
            "        \"Hanoi\",\n",
            "        \"Bangkok\",\n",
            "        \"Surabaya\",\n",
            "        \"Bandung\",\n",
            "        \"Kuala Lumpur\",\n",
            "        \"Yangon\",\n",
            "        \"Semarang\",\n",
            "        \"Singapore\",\n",
            "        \"Da Nang\",\n",
            "        \"Medan\",\n",
            "        \"Davao\",\n",
            "        \"Cebu\",\n",
            "        \"George Town\",\n",
            "        \"Makassar\",\n",
            "        \"Palembang\",\n",
            "        \"Phnom Penh\",\n",
            "        \"Yogyakarta\"\n",
            "    ],\n",
            "    \"Country\": [\n",
            "        \"Indonesia\",\n",
            "        \"Philippines\",\n",
            "        \"Vietnam\",\n",
            "        \"Vietnam\",\n",
            "        \"Thailand\",\n",
            "        \"Indonesia\",\n",
            "        \"Indonesia\",\n",
            "        \"Malaysia\",\n",
            "        \"Myanmar\",\n",
            "        \"Indonesia\",\n",
            "        \"Singapore\",\n",
            "        \"Vietnam\",\n",
            "        \"Indonesia\",\n",
            "        \"Philippines\",\n",
            "        \"Philippines\",\n",
            "        \"Malaysia\",\n",
            "        \"Indonesia\",\n",
            "        \"Indonesia\",\n",
            "        \"Cambodia\",\n",
            "        \"Indonesia\"\n",
            "    ],\n",
            "    \"Population\": [\n",
            "        \"31,673,824\",\n",
            "        \"28,250,517\",\n",
            "        \"21,281,639\",\n",
            "        \"19,980,000\",\n",
            "        \"10,696,258\",\n",
            "        \"9,924,509\",\n",
            "        \"8,790,308\",\n",
            "        \"8,455,029\",\n",
            "        \"7,360,703\",\n",
            "        \"6,009,982\",\n",
            "        \"5,685,807\",\n",
            "        \"5,622,814\",\n",
            "        \"4,756,863\",\n",
            "        \"3,339,284\",\n",
            "        \"3,165,799\",\n",
            "        \"2,843,344\",\n",
            "        \"2,725,951\",\n",
            "        \"2,634,501\",\n",
            "        \"2,506,123\",\n",
            "        \"2,485,163\"\n",
            "    ],\n",
            "    \"Area\": [\n",
            "        \"7,076.3\",\n",
            "        \"7,967.98\",\n",
            "        \"30,595.0\",\n",
            "        \"24,314.7\",\n",
            "        \"7,700.0\",\n",
            "        \"6,310.0\",\n",
            "        \"3,500.3\",\n",
            "        \"8,347.0\",\n",
            "        \"10,276.7\",\n",
            "        \"4,795.9\",\n",
            "        \"734.3\",\n",
            "        \"26,640.3\",\n",
            "        \"3,189.2\",\n",
            "        \"6,492.8\",\n",
            "        \"1,062.8\",\n",
            "        \"3,764.3\",\n",
            "        \"2,666.6\",\n",
            "        \"9,886.6\",\n",
            "        \"679.0\",\n",
            "        \"1,118.2\"\n",
            "    ],\n",
            "    \"Population_Density\": [\n",
            "        4476.043129884261,\n",
            "        3545.505510807005,\n",
            "        695.5920575257395,\n",
            "        821.7251292428037,\n",
            "        1389.1244155844156,\n",
            "        1572.8223454833596,\n",
            "        2511.3013170299687,\n",
            "        1012.9422547022882,\n",
            "        716.2516177372113,\n",
            "        1253.149982276528,\n",
            "        7743.166280811658,\n",
            "        211.06421474232647,\n",
            "        1491.553681173962,\n",
            "        514.3056924593395,\n",
            "        2978.7344749717727,\n",
            "        755.344685598916,\n",
            "        1022.2571814295358,\n",
            "        266.471891246738,\n",
            "        3690.902798232695,\n",
            "        2222.4673582543373\n",
            "    ]\n",
            "}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "url = \"https://en.wikipedia.org/wiki/ASEAN\"\n",
        "\n",
        "tables = pd.read_html(url)\n",
        "\n",
        "expected_headers = [\"Metropolitan area\", \"Core city\", \"Population\",\"Area (km2)\",\"Country\",\"Census year\"]\n",
        "\n",
        "for i in tables:\n",
        "  if all(headers in i.columns for headers in expected_headers):\n",
        "    df = i\n",
        "\n",
        "df"
      ],
      "metadata": {
        "id": "G_0rm0OaHt3e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 677
        },
        "outputId": "15961d08-eeae-4350-f3e7-b3511be5590f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                     Metropolitan area         Core city  Population  \\\n",
              "0                      Greater Jakarta           Jakarta    31673824   \n",
              "1                  Greater Manila Area            Manila    28250517   \n",
              "2   Ho Chi Minh City Metropolitan Area  Ho Chi Minh City    21281639   \n",
              "3                 Hanoi Capital Region             Hanoi    19980000   \n",
              "4          Bangkok Metropolitan Region           Bangkok    10696258   \n",
              "5                     Greater Surabaya          Surabaya     9924509   \n",
              "6                      Greater Bandung           Bandung     8790308   \n",
              "7                         Klang Valley      Kuala Lumpur     8455029   \n",
              "8                        Yangon Region            Yangon     7360703   \n",
              "9                     Greater Semarang          Semarang     6009982   \n",
              "10                           Singapore         Singapore     5685807   \n",
              "11           Da Nang Metropolitan Area           Da Nang     5622814   \n",
              "12                       Greater Medan             Medan     4756863   \n",
              "13                         Metro Davao             Davao     3339284   \n",
              "14                          Metro Cebu              Cebu     3165799   \n",
              "15             George Town Conurbation       George Town     2843344   \n",
              "16                    Greater Makassar          Makassar     2725951   \n",
              "17                   Greater Palembang         Palembang     2634501   \n",
              "18               Phnom Penh Metro Area        Phnom Penh     2506123   \n",
              "19                  Greater Yogyakarta        Yogyakarta     2485163   \n",
              "\n",
              "    Area (km2)      Country   Census year  \n",
              "0      7076.30    Indonesia  2020[94][95]  \n",
              "1      7967.98  Philippines      2020[96]  \n",
              "2     30595.00      Vietnam      2019[97]  \n",
              "3     24314.70      Vietnam      2019[97]  \n",
              "4      7700.00     Thailand      2020[98]  \n",
              "5      6310.00    Indonesia  2020[94][95]  \n",
              "6      3500.30    Indonesia  2020[94][95]  \n",
              "7      8347.00     Malaysia      2020[99]  \n",
              "8     10276.70      Myanmar     2014[100]  \n",
              "9      4795.90    Indonesia  2020[94][95]  \n",
              "10      734.30    Singapore     2020[101]  \n",
              "11    26640.30      Vietnam      2019[97]  \n",
              "12     3189.20    Indonesia  2020[94][95]  \n",
              "13     6492.80  Philippines      2020[96]  \n",
              "14     1062.80  Philippines      2020[96]  \n",
              "15     3764.30     Malaysia      2020[99]  \n",
              "16     2666.60    Indonesia  2020[94][95]  \n",
              "17     9886.60    Indonesia  2020[94][95]  \n",
              "18      679.00     Cambodia     2019[102]  \n",
              "19     1118.20    Indonesia  2020[94][95]  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-67b50159-be53-441a-bfee-d9791516f48a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Metropolitan area</th>\n",
              "      <th>Core city</th>\n",
              "      <th>Population</th>\n",
              "      <th>Area (km2)</th>\n",
              "      <th>Country</th>\n",
              "      <th>Census year</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Greater Jakarta</td>\n",
              "      <td>Jakarta</td>\n",
              "      <td>31673824</td>\n",
              "      <td>7076.30</td>\n",
              "      <td>Indonesia</td>\n",
              "      <td>2020[94][95]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Greater Manila Area</td>\n",
              "      <td>Manila</td>\n",
              "      <td>28250517</td>\n",
              "      <td>7967.98</td>\n",
              "      <td>Philippines</td>\n",
              "      <td>2020[96]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Ho Chi Minh City Metropolitan Area</td>\n",
              "      <td>Ho Chi Minh City</td>\n",
              "      <td>21281639</td>\n",
              "      <td>30595.00</td>\n",
              "      <td>Vietnam</td>\n",
              "      <td>2019[97]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Hanoi Capital Region</td>\n",
              "      <td>Hanoi</td>\n",
              "      <td>19980000</td>\n",
              "      <td>24314.70</td>\n",
              "      <td>Vietnam</td>\n",
              "      <td>2019[97]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Bangkok Metropolitan Region</td>\n",
              "      <td>Bangkok</td>\n",
              "      <td>10696258</td>\n",
              "      <td>7700.00</td>\n",
              "      <td>Thailand</td>\n",
              "      <td>2020[98]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Greater Surabaya</td>\n",
              "      <td>Surabaya</td>\n",
              "      <td>9924509</td>\n",
              "      <td>6310.00</td>\n",
              "      <td>Indonesia</td>\n",
              "      <td>2020[94][95]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Greater Bandung</td>\n",
              "      <td>Bandung</td>\n",
              "      <td>8790308</td>\n",
              "      <td>3500.30</td>\n",
              "      <td>Indonesia</td>\n",
              "      <td>2020[94][95]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Klang Valley</td>\n",
              "      <td>Kuala Lumpur</td>\n",
              "      <td>8455029</td>\n",
              "      <td>8347.00</td>\n",
              "      <td>Malaysia</td>\n",
              "      <td>2020[99]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Yangon Region</td>\n",
              "      <td>Yangon</td>\n",
              "      <td>7360703</td>\n",
              "      <td>10276.70</td>\n",
              "      <td>Myanmar</td>\n",
              "      <td>2014[100]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Greater Semarang</td>\n",
              "      <td>Semarang</td>\n",
              "      <td>6009982</td>\n",
              "      <td>4795.90</td>\n",
              "      <td>Indonesia</td>\n",
              "      <td>2020[94][95]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>Singapore</td>\n",
              "      <td>Singapore</td>\n",
              "      <td>5685807</td>\n",
              "      <td>734.30</td>\n",
              "      <td>Singapore</td>\n",
              "      <td>2020[101]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>Da Nang Metropolitan Area</td>\n",
              "      <td>Da Nang</td>\n",
              "      <td>5622814</td>\n",
              "      <td>26640.30</td>\n",
              "      <td>Vietnam</td>\n",
              "      <td>2019[97]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>Greater Medan</td>\n",
              "      <td>Medan</td>\n",
              "      <td>4756863</td>\n",
              "      <td>3189.20</td>\n",
              "      <td>Indonesia</td>\n",
              "      <td>2020[94][95]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>Metro Davao</td>\n",
              "      <td>Davao</td>\n",
              "      <td>3339284</td>\n",
              "      <td>6492.80</td>\n",
              "      <td>Philippines</td>\n",
              "      <td>2020[96]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>Metro Cebu</td>\n",
              "      <td>Cebu</td>\n",
              "      <td>3165799</td>\n",
              "      <td>1062.80</td>\n",
              "      <td>Philippines</td>\n",
              "      <td>2020[96]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>George Town Conurbation</td>\n",
              "      <td>George Town</td>\n",
              "      <td>2843344</td>\n",
              "      <td>3764.30</td>\n",
              "      <td>Malaysia</td>\n",
              "      <td>2020[99]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>Greater Makassar</td>\n",
              "      <td>Makassar</td>\n",
              "      <td>2725951</td>\n",
              "      <td>2666.60</td>\n",
              "      <td>Indonesia</td>\n",
              "      <td>2020[94][95]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>Greater Palembang</td>\n",
              "      <td>Palembang</td>\n",
              "      <td>2634501</td>\n",
              "      <td>9886.60</td>\n",
              "      <td>Indonesia</td>\n",
              "      <td>2020[94][95]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>Phnom Penh Metro Area</td>\n",
              "      <td>Phnom Penh</td>\n",
              "      <td>2506123</td>\n",
              "      <td>679.00</td>\n",
              "      <td>Cambodia</td>\n",
              "      <td>2019[102]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>Greater Yogyakarta</td>\n",
              "      <td>Yogyakarta</td>\n",
              "      <td>2485163</td>\n",
              "      <td>1118.20</td>\n",
              "      <td>Indonesia</td>\n",
              "      <td>2020[94][95]</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-67b50159-be53-441a-bfee-d9791516f48a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-67b50159-be53-441a-bfee-d9791516f48a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-67b50159-be53-441a-bfee-d9791516f48a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-e400c78e-8d6b-4feb-8dfc-3f5ad7eca5bf\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e400c78e-8d6b-4feb-8dfc-3f5ad7eca5bf')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-e400c78e-8d6b-4feb-8dfc-3f5ad7eca5bf button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_7d09a549-d3ce-4e2f-84cc-ec142513d3c8\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_7d09a549-d3ce-4e2f-84cc-ec142513d3c8 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 20,\n  \"fields\": [\n    {\n      \"column\": \"Metropolitan area\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 20,\n        \"samples\": [\n          \"Greater Jakarta\",\n          \"Greater Palembang\",\n          \"George Town Conurbation\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Core city\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 20,\n        \"samples\": [\n          \"Jakarta\",\n          \"Palembang\",\n          \"George Town\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Population\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8817769,\n        \"min\": 2485163,\n        \"max\": 31673824,\n        \"num_unique_values\": 20,\n        \"samples\": [\n          31673824,\n          2634501,\n          2843344\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Area (km2)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8701.12215883488,\n        \"min\": 679.0,\n        \"max\": 30595.0,\n        \"num_unique_values\": 20,\n        \"samples\": [\n          7076.3,\n          9886.6,\n          3764.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Country\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 8,\n        \"samples\": [\n          \"Philippines\",\n          \"Myanmar\",\n          \"Indonesia\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Census year\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 8,\n        \"samples\": [\n          \"2020[96]\",\n          \"2014[100]\",\n          \"2020[94][95]\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "_sEz0ofiGRjh"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}